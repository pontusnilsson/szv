<?php
// $Id$

/**
 * @file
 * Defines a widget for entering swedish zipcodes
 */

define('SZV_API', 'http://www.postnummersok.se/api');

/**
* Implementation of hook_menu().
*/
function szv_menu() {
  $items = array();

  $items['szv'] = array(
    'page callback' => '_szv_validate_postnummersok_path',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_widget_info()
 */
function szv_widget_info() {
  return array(
    // The machine name of the widget
    'szv_widget' => array(
      // The human-readable label of the field that will be
      // seen in the Manage fields screen.
      'label' => t('Swedish zipcode'),
      // An array of the field types this widget can be
      // used with.
      'field types' => array('text'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function szv_widget_settings($op, $widget) {
  switch ($op) {
    // Create the form element to be used on the widget
    // settings form. Widget settings can be different
    // for each shared instance of the same field and
    // should define the way the value is displayed to
    // the user in the edit form for that content type.
    case 'form':
      $form = array();
      // Swedish zipcodes are 5 characters in length.
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 5;            
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      $city = (isset($widget['city'])) ? $widget['city'] : '';
      $form['city'] = array(
        '#type' => 'select',
        '#title' => t('Select city field'),
        '#default_value' => $city,
        '#options' => _szv_get_possible_city_field(),
        '#element_validate' => array(),
        '#required' => TRUE,
      );

      return $form;

    // Return an array of the names of the widget settings
    // defined by this module.
    case 'save':
      return array('size', 'city');
  }
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function szv_elements() {
  return array(
    'szv_widget' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('szv_widget_process'),
    )
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form.
 *
 * CCK core fields only add a stub element and builds
 * the complete item in #process so reusable elements
 * created by hook_elements can be plugged into any
 * module that provides valid $field information.
 *
 * Custom widgets that don't care about using hook_elements
 * can be built out completely at this time.
 *
 * If there are multiple values for this field and CCK is
 * handling multiple values, the content module will call
 * this function as many times as needed.
 *
 * @param $form
 *   the entire form array,
 *   $form['#node'] holds node information
 * @param $form_state
 *   the form_state,
 *   $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of
 *   subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function szv_widget(&$form, &$form_state, $field, $items, $delta = 0) {  
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#element_validate' => array('_szv_element_validate_zipcode'),
  );
  return $element;

  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => $field['widget']['label'],
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 5,
    '#attributes' => array('class' => 'text '.$zipCodeSel),
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
    '#element_validate' => array('_szv_element_validate_zipcode'),
  );

  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function szv_widget_process($element, $edit, $form_state, $form) {  
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];

  $zipCodeSel = 'szv-'.$delta.'-zipcode';
  $js_settings = array(
      'szv' => array(
          $field['field_name'] => array(
            'city' => $field['widget']['city'],
            'selector' => $zipCodeSel
          )
      )
  );

  // Check if the API is online
  if (_szv_site_online(SZV_API)) {
    drupal_add_css(drupal_get_path('module', 'szv') . '/szv.css');
    drupal_add_js($js_settings, 'setting');
    drupal_add_js(drupal_get_path('module', 'szv') . '/szv.js');
  }

  /*
  $element = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,    
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
    '#attributes' => array('class' => 'text szv'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
   */

  $element['#type'] = 'textfield';
  $element['#default_value'] = isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL;
  $element['#size'] = !empty($field['widget']['size']) ? $field['widget']['size'] : 60;
  $element['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;
  $element['#attributes'] = array('class' => 'text szv-zipcode '.$zipCodeSel);
  $element['#columns'] = $element['#columns'];

  return $element;
}

/**
 * Function to find fields that could be used as city field in the widget settings
 */
function _szv_get_possible_city_field() {
  // Get the content type the widget is on
  $content_type_name = arg(3);
  $content_type_info = content_types($content_type_name);

  $fields = array();
  foreach ($content_type_info['fields'] as $field_name => $field_info) {
 
    if ($field_info['type'] == 'text' && $field_info['widget']['type'] == 'text_textfield' && $field_info['multiple'] == 0) {      
      $fields[$field_name] = $field_info['widget']['label'];
    }    
  }
  return $fields;
}

/**
 * Form element validator
 */
function _szv_element_validate_zipcode($element, &$form_state) {
  
  $value = $element['#value'];

  // If the default value for the field is not set on the widget settings page, we don't validate it
  if($form_state['values']['form_id'] == 'content_field_edit_form' && empty($value))
    return;

  if (!_szv_validate_postnummersok_bool($value)) {
    
    form_error($element, t('!name must be in the swedish zipcode format.', array('!name' => $element['#title'])));
  }
}

/**
 * Print result from API, to be interpreted by Javascript
 * @param <type> $zipcode
 */
function _szv_validate_postnummersok_path($zipcode) {
  $result = _szv_validate_postnummersok($zipcode);  
  print $result !== false ? $result : '(null)';
}

/**
 * Function to be used by PHP to determine correct zipcode
 * @param <type> $zipcode
 * @return <type>
 */
function _szv_validate_postnummersok_bool($zipcode) {
  $response = _szv_validate_postnummersok($zipcode);
    
  return $response == '(null)' ? false : true;
}

/**
 * Get json object from API
 */
function _szv_validate_postnummersok($zipcode) {

  // Strip whitespace (or other characters) from the beginning and end of the string
  $zipcode = trim($zipcode);
  
    $response = drupal_http_request(SZV_API."?q=$zipcode");    
    $response = (array) json_decode($response->data);

return $response[0];
}

/**
 * Function to check if a site is online
 */
function _szv_site_online($url)
{
  $result = drupal_http_request($url);

  // We only accept responses with certain response codes
  $accepted_response_codes = array(
    200, // OK
    304, // Not modified
    301, // Moved permanently
    302, // Found
    307, // Temporary Redirect
  );

  return in_array($result->code, $accepted_response_codes) && !$result->error ? TRUE : FALSE;
}
